name: Deploy to EC2

on:
  push:
    branches: [ main, use-cloud-db ]  # Deploy on push to main or use-cloud-db branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest

    - name: Install dependencies
      run: pnpm install

    - name: Run type checking
      run: pnpm typecheck

    - name: Run linting
      run: pnpm lint

    - name: Build project (if needed)
      run: pnpm codegen

    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r src deployment-package/
        cp -r abis deployment-package/
        cp -r generated deployment-package/ || true
        cp package.json deployment-package/
        cp pnpm-lock.yaml deployment-package/
        cp ponder.config.ts deployment-package/
        cp ponder.schema.ts deployment-package/
        cp ponder-env.d.ts deployment-package/
        cp tsconfig.json deployment-package/
        cp drizzle.config.ts deployment-package/
        cp ecosystem.config.js deployment-package/
        cp -r drizzle deployment-package/ || true
        
        # Create deployment script
        cat > deployment-package/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment..."
        
        # Install pnpm if not exists
        if ! command -v pnpm &> /dev/null; then
            echo "üì¶ Installing pnpm..."
            npm install -g pnpm
        fi
        
        # Install dependencies
        echo "üì¶ Installing dependencies..."
        pnpm install --prod
        
        # Stop existing process
        echo "‚èπÔ∏è Stopping existing application..."
        pkill -f "ponder" || echo "No existing ponder process found"
        
        # Run database migrations if needed
        if [ -f "drizzle.config.ts" ]; then
            echo "üóÑÔ∏è Running database operations..."
            pnpm db || echo "Database operations completed"
        fi
        
        # Generate code
        echo "üîß Generating code..."
        pnpm codegen || echo "Code generation completed"
        
        # Start the application using PM2
        echo "üöÄ Starting application with PM2..."
        
        # Install PM2 if not exists
        if ! command -v pm2 &> /dev/null; then
            echo "üì¶ Installing PM2..."
            npm install -g pm2
        fi
        
        # Create logs directory
        mkdir -p logs
        
        # Start or restart the application using ecosystem file
        pm2 stop ponder-caer || echo "No existing PM2 process to stop"
        pm2 start ecosystem.config.js --env production
        pm2 save
        
        echo "‚úÖ Deployment completed successfully!"
        echo "üìä Application status:"
        pm2 status
        EOF
        
        chmod +x deployment-package/deploy.sh

    - name: Create deployment archive
      run: tar -czf deployment.tar.gz -C deployment-package .

    - name: Deploy to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        source: "deployment.tar.gz"
        target: "/home/${{ secrets.EC2_USERNAME }}/"

    - name: Execute deployment on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          cd /home/${{ secrets.EC2_USERNAME }}/
          
          # Create backup of current deployment
          if [ -d "ponder-caer" ]; then
            echo "üì¶ Creating backup..."
            mv ponder-caer ponder-caer-backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Extract new deployment
          echo "üì¶ Extracting new deployment..."
          mkdir -p ponder-caer
          tar -xzf deployment.tar.gz -C ponder-caer
          cd ponder-caer
          
          # Make deploy script executable and run it
          chmod +x deploy.sh
          ./deploy.sh
          
          echo "üéâ Deployment completed!"

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          echo "üîç Running health check..."
          sleep 10  # Wait for application to start
          
          # Check if PM2 process is running
          if pm2 list | grep -q "ponder-caer"; then
            echo "‚úÖ Application is running successfully!"
            pm2 status
          else
            echo "‚ùå Application failed to start!"
            pm2 logs ponder-caer --lines 20 || echo "No logs available"
            exit 1
          fi
